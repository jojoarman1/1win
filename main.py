import random
import os
import telebot
from telebot import types
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging

TOKEN = '7050738799:AAGgUIcWC5BwD46im4EaOB4mLdu2HwxhnX4'
channel_username = '@hakermines12'

bot = telebot.TeleBot(TOKEN)

waiting_for_id = set()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
previous_state = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏ ID, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ
user_ids = {}


@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.InlineKeyboardMarkup()
    subscribe_btn = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{channel_username[1:]}")
    check_btn = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='check_subscription')
    markup.add(subscribe_btn)
    markup.add(check_btn)
    user_name = bot.get_chat_member(channel_username, message.chat.id).user.first_name
    welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n"
    bot.send_message(message.chat.id, welcome_text + "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ - –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ªü§ù",
                     reply_markup=markup)


def osnova(call):
    markup = types.InlineKeyboardMarkup()
    reg_btn = types.InlineKeyboardButton("üì±–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')
    instruction_btn = types.InlineKeyboardButton("üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instruction')
    signal_btn = types.InlineKeyboardButton("‚ùóÔ∏è–í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª‚ùóÔ∏è", callback_data='give_signal')
    markup.add(reg_btn, instruction_btn)
    markup.add(signal_btn)
    welcome_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üî∏*HAKERMINES*üî∏!\n\n"
        "üí£ *Mines* - —ç—Ç–æ –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ 1win, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º ‚Äú–°–∞–ø—ë—Ä–µ‚Äù.\n"
        "–í–∞—à–∞ —Ü–µ–ª—å - –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ –ª–æ–≤—É—à–∫–∏.\n\n"
        "`\n"
        "–ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç OpenAI..\n"
        "–û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 90%.\n"
        "`"
    )
    bot.send_message(call.message.chat.id, welcome_message, reply_markup=markup, parse_mode='Markdown')


@bot.callback_query_handler(func=lambda call: call.data == 'check_subscription')
def callback_handler(call):
    check_user_subscription(call)


@bot.callback_query_handler(func=lambda call: call.data == 'register')
def callback_handler(call):
    register(call)


@bot.callback_query_handler(func=lambda call: call.data == 'instruction')
def callback_handler(call):
    previous_state[call.message.chat.id] = send_instruction
    send_instruction(call)


@bot.callback_query_handler(func=lambda call: call.data == 'give_signal')
def callback_handler(call):
    if str(call.message.chat.id) in user_ids:
        give_signal(call)
    else:
        bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")


@bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
def back_to_main_menu_handler(call):
    chat_id = call.message.chat.id
    if chat_id in previous_state:
        previous_state.pop(chat_id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    osnova(call)
    if str(chat_id) in user_ids:
        enable_give_signal_button(call)
    else:
        disable_give_signal_button(call)


def check_user_subscription(call):
    try:
        chat_member = bot.get_chat_member(channel_username, call.message.chat.id)
        if chat_member.status not in ['left', 'kicked']:
            bot.answer_callback_query(call.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
            osnova(call)
        else:
            bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", show_alert=True)
    except Exception as e:
        print(e)
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


def register(call):
    message = (
        "üî∑ 1. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ <a href='https://1wooxx.life/casino/list?open=register'>1WIN(CLICK) </a> ""–î–õ–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ –°–û–ó–î–ê–ô–¢–ï –ù–û–í–´–ô –ê–ö–ö–ê–£–ù–¢ - —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º <code>MINES54</code>\n"
        "üî∑ 2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ c–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç–µ (–í–∫–ª–∞–¥–∫–∞ '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' –∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±—É–¥–µ—Ç –≤–∞—à ID).\n"
        "üî∑ 3. –ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    markup = types.InlineKeyboardMarkup()
    subscribe_btn = types.InlineKeyboardButton("üì±üî∂ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
                                               url='https://1wooxx.life/casino/list?open=register')
    back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(subscribe_btn)
    markup.add(back_btn)
    with open("REGISTERPHOTO.jpg", "rb") as photo:
        bot.send_photo(call.message.chat.id, photo, caption=message, reply_markup=markup, parse_mode='HTML')


def send_instruction(call):
    message = (
        "–ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –∏ –æ–±—É—á–µ–Ω –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ üñ• <b>[bitsGap]</b>.\n\n"
        "–î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –±—ã–ª–æ —Å—ã–≥—Ä–∞–Ω–æ üé∞10.000+ –∏–≥—Ä.\n"
        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–µ–ª–∞—é—Ç –≤ –¥–µ–Ω—å 15-25% –æ—Ç —Å–≤–æ–µ–≥–æ üí∏ –∫–∞–ø–∏—Ç–∞–ª–∞!\n\n"

        "<code>–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –ø–æ —Å–µ–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –¢–æ—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 90%!</code>\n\n"

        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n\n"
        "üü¢ 1. –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ <a href='https://1wcdcw.xyz/casino/list?open=register'>1WIN(CLICK) </a> \n"
        "–ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è - –∑–∞—Ö–æ–¥–∏–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º VPN (–®–≤–µ—Ü–∏—è). –í Play Market/App Store –ø–æ–ª–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: Vpnify, Planet VPN, Hotspot VPN –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ!\n\n"
        "<code>–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç!</code>\n\n"
        "üü¢ 2. –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
        "üü¢ 3. –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª 1win games –∏ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É üí£'MINE'.\n\n"
        "üü¢ 4. –í—ã—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª-–≤–æ –ª–æ–≤—É—à–µ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ —Ç—Ä—ë—Ö. –≠—Ç–æ –≤–∞–∂–Ω–æ!\n\n"
        "üü¢ 5. –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –±–æ—Ç–µ –∏ —Å—Ç–∞–≤–∏—Ç—å –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –∏–∑ –±–æ—Ç–∞.\n\n"
        "üü¢ 6. –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ —Å–æ–≤–µ—Ç—É–µ–º —É–¥–≤–æ–∏—Ç—å(–•¬≤) —Å—Ç–∞–≤–∫—É —á—Ç–æ –±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∫—Ä—ã—Ç—å –ø–æ—Ç–µ—Ä—é –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–∏–≥–Ω–∞–ª–µ."
    )
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')
    markup.add(back_btn)
    with open("INSTRUKT.jpg", "rb") as photo:
        bot.send_photo(call.message.chat.id, photo.read(), caption=message, reply_markup=markup, parse_mode='HTML')


last_message_id = None


def give_signal(call):
    global last_message_id

    loading_messages = [
        "üî¥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.",
        "üü° –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞..",
        "üîµ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞...",
        "üü£ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞....",
        "üü° –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞..",
        "üîµ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞..."
    ]

    if last_message_id:
        try:
            bot.delete_message(call.message.chat.id, last_message_id)
        except telebot.apihelper.ApiTelegramException as e:
            if "message to delete not found" not in e.description:
                raise

    sent_message = bot.send_message(call.message.chat.id, loading_messages[0])

    for message in loading_messages[1:]:
        time.sleep(1)
        bot.edit_message_text(chat_id=sent_message.chat.id, message_id=sent_message.message_id, text=message)

    photo_directory = "Signal/"
    photo_files = os.listdir(photo_directory)

    random_photo_file = random.choice(photo_files)
    photo_path = os.path.join(photo_directory, random_photo_file)

    with open(photo_path, "rb") as photo:
        button = InlineKeyboardButton("‚ùóÔ∏è–í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª‚ùóÔ∏è", callback_data='give_signal')
        reply_markup = InlineKeyboardMarkup().add(button)
        sent_photo = bot.send_photo(call.message.chat.id, photo, reply_markup=reply_markup)

        last_message_id = sent_photo.message_id

    bot.delete_message(call.message.chat.id, sent_message.message_id)


def disable_give_signal_button(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîí –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å)", callback_data='disabled'))
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)


def enable_give_signal_button(call):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùóÔ∏è –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data='give_signal'))
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@bot.message_handler(commands=['register'])
def register_command(message):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    bot.send_message(message.chat.id, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π ID, –Ω–∞—á–∏–Ω–∞—è —Å 'ID:'. –ù–∞–ø—Ä–∏–º–µ—Ä, ID:123456789.")


@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_registration(message):
    user_id_telegram = str(message.chat.id)
    user_id_site = message.text  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(user_id_site) == 8:
        user_ids[user_id_telegram] = user_id_site  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –∏ ID –Ω–∞ —Å–∞–π—Ç–µ
        markup = types.InlineKeyboardMarkup()
        give_signal_button = types.InlineKeyboardButton("‚ùóÔ∏è –í—ã–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª ‚ùóÔ∏è", callback_data='give_signal')
        instruction_button = types.InlineKeyboardButton("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='instruction')
        close_menu_button = types.InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data='close_menu')
        markup.row(give_signal_button)
        markup.row(instruction_button)
        markup.row(close_menu_button)
        bot.send_message(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID.")

@bot.callback_query_handler(func=lambda call: call.data == 'close_menu')
def close_menu_handler(call):
    bot.delete_message(call.message.chat.id, call.message.message_id)



while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(e)
        time.sleep(15)
